import QtQml.Models 2.2
import QtQuick 2.12
import QtQuick.Layouts 1.12
import QtQuick.Controls 2.12
import QtQuick.Controls.Material 2.12
import QtQuick.Controls.Universal 2.12
import Qt.labs.settings 1.0
import QtMultimedia 5.15
import Qt.labs.qmlmodels 1.0

import Arjun 1.0
import "test.js" as Global


//New VERSION STARTS HERE
ApplicationWindow {
    visible: true
    width: 708
    height: 785
    title: qsTr("Make some splashs!")
    id: root
    property var p: false
    property var thisTitle: "Make some splashs!"
    property var endingPage: " "
    property var mArray:[]
    property var firstTime5: true;
    property var currentMissionRewards: 0;
    property var arr: []
    property var currentMissionsNumber: []
    Audio{
        id: mMusic1
        source:"file:///Users/arjun/Documents/CompetitiveBall/images/mMusic1.wav"
        loops:Audio.Infinite
        volume: Extra.volume
    }
    Component.onDestruction: {
        mMusic1.stop()
        s_manager.writeSettings("volume0100", Extra.volume);
        s_manager.writeSettings("numCoins21", Extra.numCoins);
        s_manager.writeSettings("ballSource", Extra.ballSource);
        s_manager.writeSettings("personalBest55",Extra.personalBest);
        s_manager.writeSettings("datastore4445",Extra.datastore);
    }
    SettingsManager{
        id: s_manager
    }

    onClosing: {
        if(endingPage==="qrc:/CompetitiveMode.qml"){
            stackView.push("qrc:/GameStore.qml");
            stackView.pop()
        }
        stackView.push("qrc:/CompetitiveMode.qml");
        stackView.pop()
        //--------------------------------------------------------------------------------------------------------------MISSIONS START HERE

        storeForSettings();

        var datamodel = []
        for (let i = 0; i < mMissionModel.count; ++i) datamodel.push(mMissionModel.get(i))
        Extra.datastore = JSON.stringify(datamodel)
        console.log(Extra.datastore);
    }
    Component.onCompleted: {
        mMusic1.play()
        if ( Extra.datastore) {
            console.log(Extra.datastore);
            mMissionModel.clear()
            var datamodel = JSON.parse(Extra.datastore)
            for (let i = 0; i < datamodel.length; ++i) mMissionModel.append(datamodel[i])
        }
    }

    //--------------------------------------------------------------------------------------------------------------MISSIONS START HERE
    function storeForSettings(){
        if(currentMissionsNumber.length===0){
            currentMissionsNumber.push(displayDelegateModel.items.get(0).model.index);
            currentMissionsNumberChanged()
            currentMissionsNumber.push(displayDelegateModel.items.get(1).model.index);
            currentMissionsNumberChanged()
            currentMissionsNumber.push(displayDelegateModel.items.get(2).model.index);
            currentMissionsNumberChanged()
        }
    }
    function checkIfButtonNeedsToBeVisible(whatFor){
        let thing = false;
        currentMissionRewards=0;
        if(currentMissionsNumber.length==0){
            for(let j =0; j< displayDelegateModel.count;j++){
                if(displayDelegateModel.items.get(j).model.currentThings>=displayDelegateModel.items.get(j).model.neededThings && displayDelegateModel.items.get(j).model.completed!==true){
                    if(whatFor)
                        currentMissionRewards+=displayDelegateModel.items.get(j).model.reward
                    thing=true;
                }
            }
            return thing;
        }
        else{
            for(let i =0; i< 3; i++){
                if( mMissionModel.get(currentMissionsNumber[i]).currentThings>=mMissionModel.get(currentMissionsNumber[i]).neededThings && mMissionModel.get(currentMissionsNumber[i]).completed!==true){
                    if(whatFor)
                        currentMissionRewards+= mMissionModel.get(currentMissionsNumber[i]).reward
                    thing=true;
                }
            }
            return thing
        }
    }
    Connections{
        target: FlashingTimer
        function onCallUpdateMissions(){
            updateMissions()
            currentMissionsNumber=[]
            currentMissionsNumber.push(displayDelegateModel.items.get(0).model.index)
            currentMissionsNumber.push(displayDelegateModel.items.get(1).model.index)
            currentMissionsNumber.push(displayDelegateModel.items.get(2).model.index)
            currentMissionsNumberChanged()
        }
    }
    function updateMissions(){
        var rowCount = mMissionModel.count;
        mArray = [];
        if(firstTime5){
            displayDelegateModel.items.remove(0,displayDelegateModel.items.count);
            firstTime5=false;
        }
        else
            displayDelegateModel.items.removeGroups(0, 3, "todaysMissions");
        for(let i =0;i < rowCount;i++ ) {
            let entry = mMissionModel.get(i);
            if(!(entry.multipleTimes && entry.completed))
                mArray.push(entry)
        }
        arr = mArray.sort(() => Math.random() - Math.random()).slice(0, 3)
        for(let h =0; h < arr.length; h++){
            //subject to change
            arr[h].completed=false;
        }
        displayDelegateModel.items.insert(arr[0], "todaysMissions");
        displayDelegateModel.items.insert(arr[1], "todaysMissions");
        displayDelegateModel.items.insert(arr[2], "todaysMissions");
    }
    Rectangle {
        visible:false
        z:17
        id: mainRect
        width: parent.width*2/3
        height: parent.width*4/5
        anchors.centerIn: parent
        Rectangle{
            anchors.top: parent.top
            id: header
            width: parent.width
            height: 60
            color: "#e6ae60"
            Text{
                anchors.fill: parent
                color: "#ffffff"
                font.bold: true
                horizontalAlignment: Text.AlignHCenter
                font.pointSize: 28
                text: "Missions"
                font.family: "Complex"
            }
        }
        Rectangle{
            id: headerFade
            width: parent.width
            anchors.top:header.bottom
            height: 8
            color: "#c2910c"
        }
        Text{
            id: countdownText
            anchors.horizontalCenter: parent.horizontalCenter
            width: parent.width
            anchors.top: headerFade.bottom
            text: "NEXT MISSIONS IN "+whatToPrint;
            font.family: "GENISO"
            font.bold: true
            horizontalAlignment: Text.AlignHCenter
            color: "#595756"
            y: header.y+16
            font.pointSize: 12
        }
        //Actual model stuff START HERE-----------------------------------
        ListModel{
            id: mMissionModel
            ListElement{//0
                index: 0
                completed: false;
                description: "Splash 3 times in a row. Record: "
                multipleTimes: true
                reward: 2;
                neededThings: 3
                currentThings: 0
            }
            ListElement{//1
                index: 1
                completed: false;
                description: "Splash 6 times in a row. Record: "
                multipleTimes: true
                reward: 4;
                neededThings: 6
                currentThings: 0
            }
            ListElement{//2
                index: 2
                completed: false;
                description: "Splash 11 times in a row. Record: "
                multipleTimes: true
                reward: 12;
                neededThings: 11
                currentThings: 0
            }
            ListElement{//3
                index: 3
                completed: false;
                description: "Miss at the backboard two consecutive time. Record: "
                multipleTimes: true
                reward: 2;
                neededThings: 2
                currentThings: 0
            }
            //            ListElement{//5
            //                index: 5
            //                completed: false;
            //                description: "Play with three different balls"
            //                multipleTimes: false
            //                reward: 3;
            //                neededThings: 3
            //                currentThings: 0
            //            }
            //            ListElement{//6
            //                index: 6
            //                completed: false;
            //                description: "Purchase 'The Moon' ball"
            //                multipleTimes: false
            //                reward: 9;
            //                neededThings: 1
            //                currentThings: 0
            //            }
            //            ListElement{//7
            //                index: 7
            //                completed: false;
            //                description: "Buy 3 different types of balls"
            //                multipleTimes: false
            //                reward: 8;
            //                neededThings: 3
            //                currentThings: 0
            //            }
            //            ListElement{//8
            //                index: 8
            //                completed: false;
            //                description: "Get exactly 3 coins in a twice"
            //                multipleTimes: true
            //                reward: 4;
            //                neededThings: 2
            //                currentThings: 0
            //            }
            //            ListElement{//9
            //                index: 9
            //                completed: false;
            //                name: ""
            //                description: "Advance to level 3 while earning zero coins in the match"
            //                multipleTimes: true
            //                reward: 9;
            //                neededThings: 1
            //                currentThings: 0
            //            }
            //            ListElement{//10
            //                index: 10
            //                completed: false;
            //                description: "Earning 8 coins in a game. Record: "
            //                multipleTimes: true
            //                reward: 4;
            //                neededThings: 1
            //                currentThings: 0
            //            }
            //            ListElement{//11
            //                index: 11
            //                completed: false;
            //                description: "Make at the backboard four consecutive times. Record: "
            //                multipleTimes: true
            //                reward: 6;
            //                neededThings: 4
            //                currentThings: 0
            //            }
            //            ListElement{//12
            //                index: 12
            //                completed: false;
            //                description: "Complete the other two challenges."
            //                multipleTimes: true
            //                reward: 4;
            //                neededThings: 2
            //                currentThings: 0
            //            }
            //            ListElement{//13
            //                index: 13
            //                completed: false
            //                description: "Miss two consecutively at the rim in level 3. Record:"
            //                multipleTimes: true
            //                reward: 3;
            //                neededThings: 3
            //                currentThings: 0
            //            }
            //            ListElement{//14
            //                index: 14
            //                completed: false;
            //                name: ""
            //                description: "Advance to level 2 while earning zero coins in the match"
            //                multipleTimes: true
            //                reward: 9;
            //                neededThings: 1
            //                currentThings: 0
            //            }
        }
        Component{
            id: mMissionDelegate

            Rectangle{
                anchors.horizontalCenter: parent.horizontalCenter
                width: mainRect.width-25
                height: width*1/4+16
                Rectangle{
                    visible: (completed)
                    width: mainRect.width-25
                    height: width*1/4+16
                    anchors.horizontalCenter: parent.horizontalCenter
                    color: "white"
                    border.width: 10
                    border.color: "#7ae868"
                    Text{
                        anchors.centerIn: parent
                        text: "COMPLETED"
                        font.family: "Segoe UI Light"
                        font.bold: true
                        font.underline: true
                        horizontalAlignment: Text.AlignHCenter
                        font.pointSize: 16
                        color: "#7ae868"

                    }
                }
                Rectangle{
                    visible: !completed
                    width: mainRect.width-25
                    height: width*1/4+16
                    anchors.horizontalCenter: parent.horizontalCenter
                    color: "transparent"
                    Rectangle{
                        id: mainDelegateRect
                        width: parent.width
                        height: parent.height-12
                        anchors.verticalCenter: parent.verticalCenter
                        color: (currentThings>=neededThings)?"#7ae868":"#e6ae60"
                        Column{
                            x:16
                            y:10
                            spacing: 20;
                            width: parent.width
                            Text{
                                id: theText
                                y:15
                                font.family: "Swis721 Cn BT"
                                font.bold: true
                                width: parent.width*2/3+15
                                wrapMode: Text.Wrap
                                font.pointSize: 12.5
                                color: "white"
                                text:description
                                //description text
                            }
                            Row{
                                spacing:2
                                //progress bar
                                ProgressBar {
                                    id: thingsLeft
                                    value: currentThings/neededThings
                                    padding: 2
                                    Text{
                                        z:3
                                        anchors.centerIn: parent
                                        color: "white"
                                        font.family: "Swis721 Cn BT"
                                        font.bold: true
                                        font.pointSize: 14
                                        text:(currentThings>=neededThings)?(neededThings+"/"+neededThings):(currentThings+"/"+neededThings)
                                    }
                                    background: Rectangle {
                                        implicitWidth: theText.width
                                        implicitHeight: 32
                                        color: "#000000"
                                        radius: 2
                                    }
                                    contentItem: Item {
                                        implicitWidth: theText.width
                                        implicitHeight: 26
                                        Rectangle {
                                            width: thingsLeft.visualPosition * parent.width
                                            height: parent.height
                                            radius: 2
                                            color: "#06bf0c"
                                        }
                                    }
                                }
                                //filler space
                                Rectangle{
                                    width: 35
                                    height: 2
                                    color: "transparent"
                                }
                                //reward
                                Text{
                                    anchors.verticalCenter: parent.verticalCenter
                                    color: "black"
                                    font.family: "Swis721 Cn BT"
                                    font.bold: true
                                    font.pointSize: 18
                                    text:reward
                                }
                                //coin pic
                                Image{
                                    anchors.verticalCenter: parent.verticalCenter
                                    width: 35
                                    height: 35
                                    source: "file:///Users/arjun/Documents/CompetitiveBall/images/coinFront.png"
                                }
                            }
                        }
                    }
                }
            }
        }
        ListView {
            id: listOfMissions
            z:18
            anchors.top: countdownText.bottom
            width: parent.width
            height: parent.height-header.height-headerFade.height-countdownText.height-getRewardsButton.height-15
            x: 0;
            spacing: 5
            model: displayDelegateModel             // 6
        }
        DelegateModel {
            id: displayDelegateModel
            delegate:  mMissionDelegate
            model: mMissionModel
            groups: [
                DelegateModelGroup   {
                    id: mDelegateGroupModel
                    includeByDefault: false
                    name: "todaysMissions"
                }
            ]
            filterOnGroup: "todaysMissions"
            Component.onCompleted: {
                if(currentMissionsNumber.length!=0){
                    displayDelegateModel.items.insert(mMissionModel.get(currentMissionsNumber[0]), "todaysMissions");
                    displayDelegateModel.items.insert(mMissionModel.get(currentMissionsNumber[1]), "todaysMissions");
                    displayDelegateModel.items.insert(mMissionModel.get(currentMissionsNumber[2]), "todaysMissions");
                }
                else{
                    updateMissions()
                }
            }
        }
        //Actual model stuff ENDS HERE------------------------------------------------------------
        Button{
            onClicked: {
                if(visible){
                    Extra.numCoins+= currentMissionRewards;
                    //remove delegates for completed missions
                    for(let i =0; i< displayDelegateModel.items.count;i++){
                        if(displayDelegateModel.items.get(i).model.currentThings>=displayDelegateModel.items.get(i).model.neededThings){
                            displayDelegateModel.items.get(i).model.completed=true;
                            mMissionModel.get(displayDelegateModel.items.get(i).model.index).completed=true
                        }
                    }
                    visible=false;
                    getRewardsButtonFade.visible=false;
                }
            }
            visible: currentMissionRewards!=0;
            z: 19
            id: getRewardsButton
            anchors.top: listOfMissions.bottom
            anchors.horizontalCenter: parent.horizontalCenter
            height: 50
            width: 140
            Rectangle{
                anchors.fill: parent
                color: "#40ad36"

            }
            Row{
                x:10
                anchors.verticalCenter: parent.verticalCenter
                Text{
                    anchors.verticalCenter: parent.verticalCenter
                    color: "black"
                    font.family: "Swis721 Cn BT"
                    font.bold: true
                    font.pointSize: 18
                    text:"Get"
                }
                Rectangle{
                    width: 15
                    height: 2
                    color: "transparent"
                }

                //text
                Text{
                    anchors.verticalCenter: parent.verticalCenter
                    color: "black"
                    font.family: "Swis721 Cn BT"
                    font.bold: true
                    font.pointSize: 18
                    text: currentMissionRewards
                }
                //coin pic
                Image{
                    anchors.verticalCenter: parent.verticalCenter
                    width: 35
                    height: 35
                    source: "file:///Users/arjun/Documents/CompetitiveBall/images/coinFront.png"
                }
            }
        }
        Rectangle{
            visible: currentMissionRewards!=0;
            id: getRewardsButtonFade
            width: getRewardsButton.width
            height: getRewardsButton.height
            y: getRewardsButton.y+5
            x: getRewardsButton.x-5
            color: "#188509"
        }
    }
    Rectangle{
        visible:false;
        z:16
        id: mainRectFade
        x: mainRect.x-10
        y: mainRect.y+17
        width: mainRect.width
        height:mainRect.height
        color: "#c2910c"
    }

    //---------------------------------------------------------------------------------------------------------------------------------------------------
    Dialog {
        onOpened: {
            Extra.isOpen = true;
        }
        onClosed: {
            Extra.isOpen = false;
        }
        id: aboutDialog
        modal: true
        focus: true
        x: (root.width - width) / 2
        y: root.height / 6
        width: Math.min(root.width, root.height) /4*3
        contentHeight: aboutColumn.height
        Flickable{
            contentHeight: aboutColumn.implicitHeight
            Column {
                id: aboutColumn
                spacing: 20
                anchors.fill: parent
                Label {
                    width: aboutDialog.availableWidth
                    text: "How to play"
                    wrapMode: Label.Wrap
                    font.pixelSize: 30
                    font.bold:true;
                    horizontalAlignment: "AlignHCenter"
                }
                Label {
                    width: aboutDialog.availableWidth
                    text: "A fun game related to sports and bouncing balls!"
                    wrapMode: Label.Wrap
                    font.pixelSize: 20
                }

                Label {
                    width: aboutDialog.availableWidth
                    text: "The objective of the game is to try to stop the slider as close to the "
                          + "middle as possible. The shot you shoot and the points earned are based on your accuracy. Three consecutive misses and your out! The difficulty progresses along with the levels. Get coins to by new balls in The Store and play around in the brand new customization mode"
                    wrapMode: Label.Wrap
                    font.pixelSize: 16
                    font.family: "Helventica"
                }
                Label {
                    width: aboutDialog.availableWidth
                    text: "Customization mode: Play around with a bouncing ball and customize it the way you would like!"
                    wrapMode: Label.Wrap
                    font.pixelSize: 16
                    font.family: "Helventica"
                }
            }
            ScrollBar.vertical: ScrollBar{}
        }


    }
    function help() {
        let url = "https://nba.com/"
        Qt.openUrlExternally(url)
    }
    Settings {
        id: settings
        property string style: "Default"
    }
    Dialog {
        onOpened: {
            Extra.isOpen = true;
        }
        onClosed: {
            Extra.volume=volumeSlider.volume
            Extra.isOpen = false;
        }

        id: settingsDialog
        x: Math.round((root.width - width) / 2)
        y: Math.round(root.height / 6)
        width: Math.round(Math.min(root.width, root.height) / 3 * 2)
        modal: true
        focus: true
        title: "Settings"

        standardButtons: Dialog.Ok | Dialog.Cancel
        onAccepted: {
            settings.style = styleBox.displayText
            settingsDialog.close()
        }
        onRejected: {
            styleBox.currentIndex = styleBox.styleIndex
            settingsDialog.close()
        }

        contentItem: ColumnLayout {
            id: settingsColumn
            spacing: 20
            RowLayout{
                spacing: 10

                Label{
                    text: "Volume"
                }
                Slider {
                    id: volumeSlider
                    from: 0
                    to: 1
                    onValueChanged: {
                        Extra.volume=volumeSlider.volume

                    }
                    value: QtMultimedia.convertVolume(Extra.volume,QtMultimedia.LinearVolumeScale,QtMultimedia.LogarithmicVolumeScale);
                    property real volume: QtMultimedia.convertVolume(volumeSlider.value,
                                                                     QtMultimedia.LogarithmicVolumeScale, QtMultimedia.LinearVolumeScale)
                }
            }
            RowLayout {
                spacing: 10

                Label {
                    text: "Style:"
                }

                ComboBox {
                    id: styleBox
                    property int styleIndex: -1
                    model: availableStyles
                    Component.onCompleted: {
                        styleIndex = find(settings.style, Qt.MatchFixedString)
                        if (styleIndex !== -1)
                            currentIndex = styleIndex
                    }
                    Layout.fillWidth: true
                }
            }

            Label {
                text: "Restart required"
                color: "#e41e29"
                opacity: styleBox.currentIndex !== styleBox.styleIndex ? 1.0 : 0.0
                horizontalAlignment: Label.AlignHCenter
                verticalAlignment: Label.AlignVCenter
                Layout.fillWidth: true
                Layout.fillHeight: true
            }
        }
    }
    Shortcut {
        sequences: ["Esc", "Back"]
        enabled: stackView.depth > 1
        onActivated: navigateBackAction.trigger()
    }

    Shortcut {
        sequence: StandardKey.HelpContents
        onActivated: help()
    }
    Shortcut {
        sequence: "Menu"
        onActivated: optionsMenuAction.trigger()
    }

    Action {
        id: optionsMenuAction
        icon.name: "menu"
        icon.source: "file:///Users/arjun/Documents/CompetitiveBall/icons/splashs/menu.png"
        onTriggered: optionsMenu.open()
    }

    Action {
        id: navigateBackAction
        icon.name: stackView.depth > 1 ? "back" : ""
        icon.source: stackView.depth > 1? "file:///Users/arjun/Documents/CompetitiveBall/icons/splashs/back.png":""
        onTriggered: {
            if (stackView.depth > 1) {
                //Give them a reset warning
                if(root.width!=708){
                    root.width = 708;
                    root.height = 785;
                }

                if(endingPage==="qrc:/CompetitiveMode.qml"){
                    warningDialog.open();
                }
                else{
                    stackView.pop()
                    thisTitle = "Make some splashs!"
                }
            }
        }
    }
    Dialog {
        onOpened: {
            Extra.isOpen = true;
        }
        onClosed: {
            Extra.isOpen = false;
        }
        id: warningDialog
        x: Math.round((root.width - width) / 2)
        y: Math.round(root.height / 6)
        width: Math.round(Math.min(root.width, root.height) / 3 * 2)
        modal: true
        focus: true
        title: "Warning"

        standardButtons: Dialog.Ok | Dialog.Cancel
        onAccepted: {
            stackView.pop()
            warningDialog.close()
            //
            mMissionModel.get(2).currentThings=10;
            mMissionModel.clear()
            var datamodel = JSON.parse(Extra.datastore)
            for (let i = 0; i < datamodel.length; ++i) mMissionModel.append(datamodel[i])
            console.log(Extra.datastore)
            //
        }
        onRejected: {
            warningDialog.close()
        }

        contentItem: ColumnLayout {
            id: warningColumn
            spacing: 20

            RowLayout {
                spacing: 10

                Label {
                    text: "Are you sure you would like to leave? All progress in the current game (including missions) may be lost"
                    horizontalAlignment: Label.AlignHCenter
                    verticalAlignment: Label.AlignVCenter
                    Layout.fillWidth: true
                    Layout.fillHeight: true
                    wrapMode: Label.Wrap
                }
            }
        }
    }
    header: ToolBar {
        Material.foreground: "mintcream"

        RowLayout {
            spacing: 20
            anchors.fill: parent

            ToolButton {
                visible: stackView.depth>1
                action: navigateBackAction
            }

            Label {
                id: titleLabel
                text: thisTitle.toString()
                font.pixelSize: 20
                elide: Label.ElideRight
                horizontalAlignment: Qt.AlignHCenter
                verticalAlignment: Qt.AlignVCenter
                Layout.fillWidth: true
            }
            ToolButton {
                action: optionsMenuAction

                Menu {
                    id: optionsMenu
                    x: parent.width - width
                    transformOrigin: Menu.TopRight

                    Action {
                        text: "Settings"
                        onTriggered: settingsDialog.open()
                    }
                    Action {
                        text: "Help"
                        onTriggered: help()
                    }
                    Action {
                        text: "About"
                        onTriggered: aboutDialog.open()
                    }
                }
            }
        }
    }

    StackView {
        id: stackView
        anchors.fill: parent

        initialItem: Pane {
            id: pane
            MouseArea{
                anchors.fill: parent
                onClicked:{
                    if(mainRect.visible){
                        mainRect.visible = false
                        mainRectFade.visible = false
                    }
                }
            }
            Image{
                z:-1
                id: backgroundImage
                opacity: 0.4
                anchors.fill: parent
                source: "file:///Users/arjun/Documents/CompetitiveBall/images/homeBackground.png"
            }
            Text{
                x:528
                y:547
                text: "PB: " +Extra.personalBest;
                font.pointSize: 12
                font.bold: true
                font.family: "Helventica"
            }
            //coin thing in corner
            Rectangle{
                id:coinThing
                Row{
                    spacing: 20;
                    x: 10
                    y:10
                    Image{
                        anchors.verticalCenter: parent.verticalCenter
                        width: 25
                        height: 25
                        source: "file:///Users/arjun/Documents/CompetitiveBall/images/coinFront.png"
                    }
                    Text{
                        anchors.verticalCenter: parent.verticalCenter
                        property int value: Extra.numCoins
                        text: value
                        font.family: "Stencil"
                        horizontalAlignment: Text.AlignHCenter
                        font.pointSize:15
                        Behavior on value {
                            NumberAnimation { duration: 1000; easing.type: Easing.InOutQuad}
                        }
                    }

                }
            }
            Label {
                text: "Shoot some hoops!"
                font.family:"Impact"
                font.pointSize: 45
                width: 450
                wrapMode: Label.Wrap
                y:90
                anchors.horizontalCenter: parent.horizontalCenter
                horizontalAlignment: Label.AlignHCenter
            }
            Rectangle{
                y: parent.width/2
                anchors.horizontalCenter: parent.horizontalCenter
                id: buttonToPlayGame
                width: 320
                height: 100
                border.color: "#7a0a00"
                border.width: 5
                color: "#f0ad30"
                Text{
                    text: "START"
                    font.family: "Tahoma"
                    font.bold: true
                    style: Text.Raised
                    font.pointSize: 31
                    anchors.centerIn: parent
                }
                radius: 50
                MouseArea{
                    anchors.fill: parent
                    onClicked: {
                        var datamodel = []
                        for (let i = 0; i < mMissionModel.count; ++i) datamodel.push(mMissionModel.get(i))
                        Extra.datastore = JSON.stringify(datamodel)
                        mainRect.visible = false;
                        mainRectFade.visible = false;
                        stackView.push("qrc:/CompetitiveMode.qml");
                        endingPage="qrc:/CompetitiveMode.qml";
                        thisTitle="Game Mode"
                    }
                }
            }
            Column{
                y: 200
                x:20
                spacing: 50
                Rectangle{
                    color: "transparent"
                    width: 75
                    height: 75
                    radius: 50
                    border.width: 2
                    border.color: "black"
                    Image{
                        z:-1
                        anchors.centerIn: parent
                        width: 70
                        height: 70
                        source: "file:///Users/arjun/Documents/CompetitiveBall/images/shopIcon.png"
                    }
                    MouseArea{
                        anchors.fill: parent
                        onClicked: {
                            mainRect.visible = false;
                            mainRectFade.visible = false;
                            stackView.push("qrc:/GameStore.qml");
                            endingPage="qrc:/GameStore.qml";
                            thisTitle="The Store"
                        }
                    }
                }
                Rectangle{
                    color: "transparent"
                    width: 75
                    height: 75
                    radius: 50
                    border.width: 2
                    border.color: "black"
                    Image{
                        z:-1
                        anchors.centerIn: parent
                        width: 70
                        height: 70
                        source: "file:///Users/arjun/Documents/CompetitiveBall/images/bouncingBallIcon.png"
                    }
                    MouseArea{
                        anchors.fill: parent
                        onClicked: {
                            mainRect.visible = false;
                            mainRectFade.visible = false;
                            stackView.push("qrc:/CustomizationMode.qml");
                            endingPage="qrc:/CUstomizationMode.qml";
                            thisTitle="Customization Mode"
                            root.width = 1200
                            root.height= 580
                        }
                    }
                }
                Rectangle{
                    color: "transparent"
                    width: 75
                    height: 75
                    radius: 50
                    border.width: 2
                    border.color: "black"
                    Image{
                        x: 5
                        y:5
                        width: 20
                        height: 20
                        source: "file:///Users/arjun/Documents/CompetitiveBall/images/exclamationMark.png"
                        visible: checkIfButtonNeedsToBeVisible(false)    //change this to something else
                    }

                    Image{
                        z:-1
                        anchors.centerIn: parent
                        width: 70
                        height: 70
                        source: "file:///Users/arjun/Documents/CompetitiveBall/images/missionsIcon.png"
                    }
                    MouseArea{
                        anchors.fill: parent
                        onClicked: {
                            mainRect.visible = true;
                            mainRectFade.visible = true;
                            checkIfButtonNeedsToBeVisible(true);
                        }
                    }
                }
            }
            Image {
                id: arrow
                source: "file:///Users/arjun/Documents/CompetitiveBall/images/arrow1.png"
                width: 90
                height: 50
                rotation: 90
                y: 10;
                x: root.width-width+10
            }
        }
    }
    Item{
        id: clicker
        anchors.fill: parent
        focus: true
        Keys.onDigit5Pressed: {
            if(event.modifiers===Qt.ControlModifier){
                verification.visible=true;
            }
        }
    }
    TextField{
        z:5
        color: "white"
        id: verification
        placeholderText:"Enter the code"
        visible: false;
        width: 200
        height: 50
        onEditingFinished:{
            if(text==="4895"){
                Extra.numCoins+=4;
                text=""
            }
            visible = false;
            clicker.focus=true;
        }
    }
    Settings{
        category: "windows"
        property alias x: root.x
        property alias y: root.y
    }
    Settings{
        category: "missions"
        property alias fdjkjioj124kadasdasd12sdf23434543f42dadsf: root.currentMissionsNumber
    }
}
